name: build_ubuntu

on:
  workflow_dispatch:
  
env:
  ZIP_NAME: SimpleCommandRunner
  WX_VERSION: 3.1.5

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
        
      - uses: actions/checkout@v2
      
      - name: Cache wxWidget
        uses: actions/cache@v2
        id: cache-wx
        with:
          path: "~/wxWidgets-${{ env.WX_VERSION }}"
          key: ${{ runner.os }}-wx${{ env.WX_VERSION }}
            
      - name: install gtk
        run: |
          sudo apt -y install libgtk-3-dev
      
      - name: build wxWidget
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          cd ~/
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WX_VERSION }}/wxWidgets-${{ env.WX_VERSION }}.tar.bz2
          tar -xvjof wxWidgets-${{ env.WX_VERSION }}.tar.bz2
          cd wxWidgets-${{ env.WX_VERSION }}
          mkdir release
          cd release
          ../configure --enable-monolithic --disable-shared
          make -j$(nproc)
          
      - name: install wxWidget
        run: |
          cd ~/wxWidgets-${{ env.WX_VERSION }}/release
          sudo make install
          
      - name: build exe
        run: |
          ls
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -D BUILD_SHARED_LIBS=OFF ../
          cmake --build .
          
      - name: copy files
        run: |
          mkdir -p ../release/${{ env.ZIP_NAME }}
          cp build/SimpleCommandRunner ../release/${{ env.ZIP_NAME }}
          cp samples/advanced/gui_definition.json ../release/${{ env.ZIP_NAME }}
          cp changelog.txt ../release/${{ env.ZIP_NAME }}
          cp license.txt ../release/${{ env.ZIP_NAME }}
          cd ../release
          tar -jcvf ${{ env.ZIP_NAME }}.tar.bz2 ${{ env.ZIP_NAME }}
          
      - name: Upload Release Asset for ubuntu
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.url }}
          asset_path: ../release/${{ env.ZIP_NAME }}.tar.bz2
          asset_name: ${{ env.ZIP_NAME }}-${{ runner.os }}.tar.bz2
          asset_content_type: application/zip