name: build_all

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
  
env:
  ZIP_NAME: SimpleCommandRunner
  CACHE_NAME: main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-tag.outputs.version }}
      url: ${{ steps.create-release.outputs.upload_url }}
      wx_version: ${{ steps.wx-version.outputs.version }}
    steps:
    
      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            VERSION=-$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          else
            VERSION=""
          fi
          echo "::set-output name=version::$VERSION"
        shell: bash
      
      - uses: actions/checkout@v2

      - name: Check wxWidget version
        id: wx-version
        run: |
          VERSION=$(cat WX_VERSION.txt)
          echo "::set-output name=version::$VERSION"
        shell: bash
        
      - name: Create Release Draft
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Changelog
            - First Change
            - Second Change
          draft: true
          prerelease: false
       
  build_windows:
    runs-on: windows-2022
    needs: setup
    steps:
      - uses: actions/checkout@v2
      
      - name: Cache wxWidget
        uses: actions/cache@v2
        id: cache-wx
        with:
            path: "C:/wxWidgets-${{ needs.setup.outputs.wx_version }}"
            key: ${{ runner.os }}-wx${{ needs.setup.outputs.wx_version }}-${{ env.CACHE_NAME }}

      - name: Setup nmake
        if: steps.cache-wx.outputs.cache-hit != 'true'
        uses: ilammy/msvc-dev-cmd@v1
        
      - name: install wxWidget
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          cd batch_files
          ./download_wxWidgets.bat
          ./build_wxWidgets.bat
        
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.1

      - name: build exe
        run: |
          cd batch_files
          ./build_exe.bat
          
      - name: copy files
        run: |
          mkdir -p ../release
          cp build/Release/SimpleCommandRunner.exe ../release
          cp examples/5_advanced/gui_definition.json ../release
          cp changelog.txt ../release
          cp license.txt ../release
        shell: bash
        
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          directory: '../release'
          type: 'zip'
          filename: '${{ env.ZIP_NAME }}.zip'
          exclusions: '*.git* .gitignore'
          
      - name: Upload Release Asset for windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.url }}
          asset_path: ../release/${{ env.ZIP_NAME }}.zip
          asset_name: ${{ env.ZIP_NAME }}${{ needs.setup.outputs.version }}-${{ runner.os }}.zip
          asset_content_type: application/zip
          
  build_unix:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
    runs-on: ${{ matrix.os }}
    needs: setup
    steps:
      - uses: actions/checkout@v2
      
      - name: Cache wxWidget
        uses: actions/cache@v2
        id: cache-wx
        with:
            path: "~/wxWidgets-${{ needs.setup.outputs.wx_version }}"
            key: ${{ runner.os }}-wx${{ needs.setup.outputs.wx_version }}-${{ env.CACHE_NAME }}
            
      - name: install gtk
        if: runner.os=='Linux'
        run: |
          sudo apt -y install libgtk-3-dev
      
      - name: build wxWidget
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          cd shell_scripts
          bash download_wxWidgets.sh
          bash build_wxWidgets.sh
          
      - name: install wxWidget
        run: |
          bash shell_scripts/install_wxWidgets.sh
          
      - name: build exe
        run: |
          bash shell_scripts/build_exe.sh
          
      - name: copy files
        run: |
          mkdir -p ../release/${{ env.ZIP_NAME }}
          cp build/SimpleCommandRunner ../release/${{ env.ZIP_NAME }}
          cp examples/5_advanced/gui_definition.json ../release/${{ env.ZIP_NAME }}
          cp changelog.txt ../release/${{ env.ZIP_NAME }}
          cp license.txt ../release/${{ env.ZIP_NAME }}
          cd ../release
          tar -jcvf ${{ env.ZIP_NAME }}.tar.bz2 ${{ env.ZIP_NAME }}

      - name: Upload Release Asset for ubuntu
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.url }}
          asset_path: ../release/${{ env.ZIP_NAME }}.tar.bz2
          asset_name: ${{ env.ZIP_NAME }}${{ needs.setup.outputs.version }}-${{ runner.os }}.tar.bz2
          asset_content_type: application/zip
  