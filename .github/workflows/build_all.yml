name: build_all

on:
  workflow_dispatch:
  
env:
  ZIP_NAME: SimpleCommandRunner
  WX_VERSION: 3.1.5

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-tag.outputs.version }}
      url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    
      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            VERSION=-$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          else
            VERSION=""
          fi
          echo "::set-output name=version::$VERSION"
        shell: bash
        
      - name: Create Release Draft
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Changelog
            - First Change
            - Second Change
          draft: true
          prerelease: false
       
  build_windows:
    runs-on: windows-2022
    needs: setup
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.1
        
      - name: Cache wxWidget
        uses: actions/cache@v2
        id: cache-wx
        with:
            path: "C:/wxWidgets-${{ env.WX_VERSION }}"
            key: ${{ runner.os }}-wx${{ env.WX_VERSION }}
            
      - name: download wxWidget
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          cd C:/
          curl -OL https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WX_VERSION }}/wxWidgets-${{ env.WX_VERSION }}.zip
          unzip -d wxWidgets-${{ env.WX_VERSION }} wxWidgets-${{ env.WX_VERSION }}.zip
        shell: bash
        
      - name: build wxWidget
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          cd C:/wxWidgets-${{ env.WX_VERSION }}
          mkdir release
          cd release
          cmake -G "Visual Studio 17 2022" -A x64 -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=install -D wxBUILD_SHARED=OFF ../
          msbuild INSTALL.vcxproj /t:build /p:configuration=Release /p:platform=x64 -maxcpucount
          del C:/wxWidgets-${{ env.WX_VERSION }}.zip
          
      - name: copy wx to git repo
        run: |
          mkdir 3rdparty
          cp -r C:/wxWidgets-${{ env.WX_VERSION }}/release/install 3rdparty/wxWidgets-${{ env.WX_VERSION }}
          
      - name: build exe
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -D CMAKE_BUILD_TYPE=Release -D CMAKE_BUILD_SHARED=OFF ../
          msbuild SimpleCommandRunner.vcxproj /t:build /p:configuration=Release /p:platform=x64 -maxcpucount
          
      - name: copy files
        run: |
          mkdir -p ../release
          cp build/Release/SimpleCommandRunner.exe ../release
          cp samples/advanced/gui_definition.json ../release
          cp changelog.txt ../release
          cp license.txt ../release
        shell: bash
        
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          directory: '../release'
          type: 'zip'
          filename: '${{ env.ZIP_NAME }}.zip'
          exclusions: '*.git* .gitignore'
          
      - name: Upload Release Asset for windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.url }}
          asset_path: ../release/${{ env.ZIP_NAME }}.zip
          asset_name: ${{ env.ZIP_NAME }}${{ needs.setup.outputs.version }}-${{ runner.os }}.zip
          asset_content_type: application/zip
          
  build_ubuntu_and_mac:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
    runs-on: ${{ matrix.os }}
    needs: setup
    steps:
      - uses: actions/checkout@v2
      
      - name: Cache wxWidget
        uses: actions/cache@v2
        id: cache-wx
        with:
            path: "~/wxWidgets-${{ env.WX_VERSION }}"
            key: ${{ runner.os }}-wx${{ env.WX_VERSION }}-
            
      - name: install gtk
        if: runner.os=="Linux"
        run: |
          sudo apt -y install libgtk-3-dev
      
      - name: build wxWidget
        if: steps.cache-wx.outputs.cache-hit != 'true'
        run: |
          cd ~/
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WX_VERSION }}/wxWidgets-${{ env.WX_VERSION }}.tar.bz2
          tar -xvjof wxWidgets-${{ env.WX_VERSION }}.tar.bz2
          cd wxWidgets-${{ env.WX_VERSION }}
          mkdir release
          cd release
          ../configure --enable-monolithic --disable-shared
          make -j$(nproc)
          
      - name: install wxWidget
        run: |
          cd ~/wxWidgets-${{ env.WX_VERSION }}/release
          sudo make install
          
      - name: build exe
        run: |
          ls
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -D BUILD_SHARED_LIBS=OFF ../
          cmake --build .
          
      - name: copy files
        run: |
          mkdir -p ../release/${{ env.ZIP_NAME }}
          cp build/SimpleCommandRunner ../release/${{ env.ZIP_NAME }}
          cp samples/advanced/gui_definition.json ../release/${{ env.ZIP_NAME }}
          cp changelog.txt ../release/${{ env.ZIP_NAME }}
          cp license.txt ../release/${{ env.ZIP_NAME }}
          cd ../release
          tar -jcvf ${{ env.ZIP_NAME }}.tar.bz2 ${{ env.ZIP_NAME }}
      - name: Upload Release Asset for ubuntu
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.url }}
          asset_path: ../release/${{ env.ZIP_NAME }}.tar.bz2
          asset_name: ${{ env.ZIP_NAME }}${{ needs.setup.outputs.version }}-${{ runner.os }}.tar.bz2
          asset_content_type: application/zip
  